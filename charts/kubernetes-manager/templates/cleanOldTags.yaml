{{ if .Values.cleanOldTags.enabled }}
{{ if .Values.cleanOldTags.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cleanoldtags
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: {{ .Values.cleanOldTags.persistence.size | quote }}
  {{- if .Values.cleanOldTags.persistence.storageClassName }}
  {{- if (eq "-" .Values.cleanOldTags.persistence.storageClassName) }}
  storageClassName: ""
  {{- else }}
  storageClassName: "{{ .Values.cleanOldTags.persistence.storageClassName }}"
  {{- end }}
  {{- end }}
---
{{ end }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanoldtags
spec:
  schedule: {{ .Values.cleanOldTags.schedule | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ .Release.Name }}
          nodeSelector:
{{ toYaml .Values.cleanOldTags.nodeSelector | indent 12 }}
          volumes:
          - name: config
            configMap:
              name: {{ .Release.Name }}-config
          - name: registry
{{ if .Values.cleanOldTags.persistence.enabled }}
            persistentVolumeClaim:
              claimName: cleanoldtags
{{ else }}
            emptyDir: {}
{{ end }}
          containers:
          - name: cleanoldtags
            image: {{ .Values.registry.image }}
            imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
            env:
{{ include "env" . | nindent 12 }}
{{- if .Values.cleanOldTags.env }}
{{ toYaml .Values.cleanOldTags.env | indent 12 }}
{{- end }}
            resources:
{{ toYaml .Values.cleanOldTags.resources | indent 14 }}
            volumeMounts:
            - name: config
              mountPath: /config
            - mountPath: /var/lib/registry
              name: registry
            command:
            - sh
            - -c
            - |
              set -ex

              # run registry in background
              registry serve /etc/docker/registry/config.yml&
              sleep 3

              # copy registry to pod as files
              time rclone --quiet sync {{ .Values.cleanOldTags.rclone.sync }} /var/lib/registry

              registry_start_disk_size=`du -ksh /var/lib/registry/ | awk '{print $1}'`

              # detect old docker registry tags and create cleanOldTags.sh
              /app/kubernetes-manager \
              --executeCleanOldTags \
              --config=/config/config.yaml \
              {{- range .Values.args }}
              {{ . }} \
              {{- end }}
              --registry.url="http://127.0.0.1:5000" \
              --registry.directory=/var/lib/registry/

              # execute cleanup
              cat cleanOldTags.sh | sh

              # preGarbageCollect 
              {{- range .Values.cleanOldTags.preGarbageCollect }}
              {{ . }}
              {{- end }}

              # remove garbage and untagged layers from registry
              registry garbage-collect --delete-untagged /etc/docker/registry/config.yml

              registry_end_disk_size=`du -ksh /var/lib/registry/ | awk '{print $1}'`

              cat <<EOF > /tmp/status.log
              registry_start_disk_size "$registry_start_disk_size"
              registry_end_disk_size "$registry_end_disk_size"
              EOF
              
              # display content
              cat /tmp/status.log

              # push metrics to pushgateway
{{ if .Values.cleanOldTags.pushgateway.enabled }}
              curl --data-binary "@/tmp/status.log" {{ .Values.cleanOldTags.pushgateway.url }}
{{ end }}
              # remove layers from storage backend
              rclone --quiet sync /var/lib/registry {{ .Values.cleanOldTags.rclone.sync }}
{{ end }}